/*
 * This file was generated by orbit-idl-2 - DO NOT EDIT!
 */

#ifndef job_H
#define job_H 1
#include <glib.h>
#define ORBIT_IDL_SERIAL 20
#include <orbit/orbit-types.h>

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */


/** typedefs **/
#if !defined(ORBIT_DECL_JobManager) && !defined(_JobManager_defined)
#define ORBIT_DECL_JobManager 1
#define _JobManager_defined 1
#define JobManager__freekids CORBA_Object__freekids
typedef CORBA_Object JobManager;
extern CORBA_unsigned_long JobManager__classid;
#if !defined(TC_IMPL_TC_JobManager_0)
#define TC_IMPL_TC_JobManager_0 'j'
#define TC_IMPL_TC_JobManager_1 'o'
#define TC_IMPL_TC_JobManager_2 'b'
#ifdef ORBIT_IDL_C_IMODULE_job
static
#else
extern
#endif
ORBIT2_MAYBE_CONST struct CORBA_TypeCode_struct TC_JobManager_struct;
#define TC_JobManager ((CORBA_TypeCode)&TC_JobManager_struct)
#endif
#endif

/** POA structures **/
#ifndef _defined_POA_JobManager
#define _defined_POA_JobManager 1
typedef struct {
  void *_private;
CORBA_string (*_get_FirstName)(PortableServer_Servant _servant, CORBA_Environment *ev);
CORBA_string (*_get_status)(PortableServer_Servant _servant, CORBA_Environment *ev);
void (*_set_status)(PortableServer_Servant _servant, const CORBA_char * value, CORBA_Environment *ev);
CORBA_string (*QueryJobStatus)(PortableServer_Servant _servant, const CORBA_long number, CORBA_string* property, CORBA_Environment *ev);
} POA_JobManager__epv;
typedef struct {
  PortableServer_ServantBase__epv *_base_epv;
  POA_JobManager__epv *JobManager_epv;
} POA_JobManager__vepv;
typedef struct {
  void *_private;
  POA_JobManager__vepv *vepv;
} POA_JobManager;
extern void POA_JobManager__init(PortableServer_Servant servant, CORBA_Environment *ev);
extern void POA_JobManager__fini(PortableServer_Servant servant, CORBA_Environment *ev);
#endif /* _defined_POA_JobManager */

/** skel prototypes **/
void _ORBIT_skel_small_JobManager__get_FirstName(POA_JobManager *_ORBIT_servant, gpointer _ORBIT_retval, gpointer *_ORBIT_args, CORBA_Context ctx,CORBA_Environment *ev, CORBA_string (*_impl__get_FirstName)(PortableServer_Servant _servant, CORBA_Environment *ev));
void _ORBIT_skel_small_JobManager__get_status(POA_JobManager *_ORBIT_servant, gpointer _ORBIT_retval, gpointer *_ORBIT_args, CORBA_Context ctx,CORBA_Environment *ev, CORBA_string (*_impl__get_status)(PortableServer_Servant _servant, CORBA_Environment *ev));
void _ORBIT_skel_small_JobManager__set_status(POA_JobManager *_ORBIT_servant, gpointer _ORBIT_retval, gpointer *_ORBIT_args, CORBA_Context ctx,CORBA_Environment *ev, void (*_impl__set_status)(PortableServer_Servant _servant, const CORBA_char * value, CORBA_Environment *ev));
void _ORBIT_skel_small_JobManager_QueryJobStatus(POA_JobManager *_ORBIT_servant, gpointer _ORBIT_retval, gpointer *_ORBIT_args, CORBA_Context ctx,CORBA_Environment *ev, CORBA_string (*_impl_QueryJobStatus)(PortableServer_Servant _servant, const CORBA_long number, CORBA_string* property, CORBA_Environment *ev));

/** stub prototypes **/
CORBA_string JobManager__get_FirstName(JobManager _obj, CORBA_Environment *ev);
CORBA_string JobManager__get_status(JobManager _obj, CORBA_Environment *ev);
void JobManager__set_status(JobManager _obj, const CORBA_char * value, CORBA_Environment *ev);
CORBA_string JobManager_QueryJobStatus(JobManager _obj, const CORBA_long number, CORBA_string* property, CORBA_Environment *ev);
#include <orbit/orb-core/orbit-interface.h>

#ifdef ORBIT_IDL_C_IMODULE_job
static 
#else
extern 
#endif
ORBit_IInterface JobManager__iinterface;
#define JobManager_IMETHODS_LEN 4
#ifdef ORBIT_IDL_C_IMODULE_job
static 
#else
extern 
#endif
ORBit_IMethod JobManager__imethods[JobManager_IMETHODS_LEN];

/** IMethods index */

#ifndef __JobManager__imethods_index
#define __JobManager__imethods_index
typedef enum {
	JobManager__get_FirstName__imethods_index,
	JobManager__get_status__imethods_index,
	JobManager__set_status__imethods_index,
	JobManager_QueryJobStatus__imethods_index
} JobManager__imethods_index;
#endif /* __JobManager__imethods_index */

#ifndef __ORBIT_IMETHODS_INDEX
#define __ORBIT_IMETHODS_INDEX
#define ORBIT_IMETHODS_INDEX(m) (m ## __imethods_index)
#endif /* __ORBIT_IMETHODS_INDEX */

#ifdef __cplusplus
}
#endif /* __cplusplus */

#ifndef EXCLUDE_ORBIT_H
#include <orbit/orbit.h>

#endif /* EXCLUDE_ORBIT_H */
#endif
#undef ORBIT_IDL_SERIAL
